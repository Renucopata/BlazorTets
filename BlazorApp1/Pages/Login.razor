@page "/"
@using System.Net;


@layout LoginLayout
@inject NavigationManager NavManager
@inject IHttpClientFactory _clientFactory






<head>
	<PageTitle>Login</PageTitle>

	<link rel="icon" type="image/png" href="images/icons/favicon.ico"/>
	<link rel="stylesheet" type="text/css" href="fonts/font-awesome-4.7.0/css/font-awesome.min.css">
	<link rel="stylesheet" type="text/css" href="fonts/Linearicons-Free-v1.0.0/icon-font.min.css">
	<link rel="stylesheet" type="text/css" href="vendor/animate/animate.css">
	<link rel="stylesheet" type="text/css" href="vendor/css-hamburgers/hamburgers.min.css">
	<link rel="stylesheet" type="text/css" href="vendor/animsition/css/animsition.min.css">
	<link rel="stylesheet" type="text/css" href="vendor/select2/select2.min.css">
	<link rel="stylesheet" type="text/css" href="vendor/daterangepicker/daterangepicker.css">
	<link rel="stylesheet" type="text/css" href="css/util.css">
	<link rel="stylesheet" type="text/css" href="css/main.css">

</head>
@if (showAuthenticationError){
	<div class="alert alert-danger" role="alert">
		<p>authenticationErrorText</p>
	</div>

}
<body>
	
	<div class="limiter">
		<div class="container-login100" style="background-image: url('images/PCLoginBackground.jpg'); background-size: 75%;">
			<div class="wrap-login100 p-t-30 p-b-50">
				<span class="login100-form-title p-b-41">
					Cuenta de usuario
				</span>
				<EditForm class="login100-form validate-form p-b-33 p-t-5" Model="user" OnValidSubmit="ExecuteLogin">
					<div class="wrap-input100 validate-input">
						<InputText class="input100" @bind-Value="user.UserName" placeholder="Usuario" />
						<span class="focus-input100" data-placeholder="&#xe82a;"></span>
					</div>

					<div class="wrap-input100 validate-input">
						<InputText class="input100" @bind-Value="user.Password" placeholder="Contraseña" />
						<span class="focus-input100" data-placeholder="&#xe80f;"></span>
					</div>

					<div class="container-login100-form-btn m-t-32">
						<button type="submit" class="login100-form-btn">
							Entrar
						</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
	

	<div id="dropDownSelect1"></div>
	



</body>




@code {
	AuthenticationUserModel user = new();

	public static ApiConnection connection = new();




	private bool showAuthenticationError = false;
	private string authenticationErrorText = "";
	public string apiUrl = connection.get_baseUrl();  


	protected async Task ExecuteLogin()
	{
		if (await ApiRequest(tokenGeneration()))
		{
			NavManager.NavigateTo("/home");
		}
	}

	public TokenRequest tokenGeneration()
	{

		//-----Token Generation----
		var token = new JwtSecurityTokenHandler();

		string secretKey = connection.get_secretKey();
		var LlaveTk = Encoding.ASCII.GetBytes(secretKey);
		var userName = user.UserName;
		var passrowd = user.Password;
		var credenciales = new SecurityTokenDescriptor
			{
				Subject = new ClaimsIdentity(new Claim[]
						{
			new Claim("user",userName),
			new Claim("pass",passrowd)
						}),
				SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(LlaveTk), SecurityAlgorithms.HmacSha256),

			};

		token.SetDefaultTimesOnTokenCreation = false; //To remove the nbf, exp and iat extra payloads
		var salidaTk = token.CreateToken(credenciales);
		TokenRequest tokenRequest = new();
		tokenRequest.Token = token.WriteToken(salidaTk);
		return tokenRequest;

	}
	//----Token Generation---


	//---Api Request----

	//-----Restsharp way----


	public async Task <bool> ApiRequest(TokenRequest tokenRequest )
	{

		HttpClientHandler handler = new HttpClientHandler();
		handler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => { return true; };
		ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
		ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
		RestClient _clientRest = new RestClient(handler);
		RestRequest _requestRest = new RestRequest(connection.get_baseUrl(), Method.Post).AddJsonBody(tokenRequest);
		RestResponse restRponse = await _clientRest.ExecutePostAsync(_requestRest);
		var convertedResponse = JsonConvert.SerializeObject(restRponse.Content);
		



		if (restRponse.Content == "[]")
		{
			return true;
		}
		else
		{
			return false;
		}

		
	}

		








}
